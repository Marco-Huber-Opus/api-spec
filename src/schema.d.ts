/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Issue Organization Token */
        post: operations["issue_organization_token_v1_auth_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations["logout_v1_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/client_credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Issue Api Key */
        post: operations["issue_api_key_v1_auth_client_credentials_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/client_credentials/{api_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Api Key */
        delete: operations["delete_api_key_v1_auth_client_credentials__api_key_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Signup */
        post: operations["signup_v1_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/availability/dns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Dns Check Domain Availability */
        post: operations["bulk_dns_check_domain_availability_v1_availability_dns_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/availability/rdap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Rdap Check Domain Availability */
        post: operations["bulk_rdap_check_domain_availability_v1_availability_rdap_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Zones */
        get: operations["list_zones_v1_dns_get"];
        put?: never;
        /** Create Zone */
        post: operations["create_zone_v1_dns_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/{zone_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Zone */
        get: operations["get_zone_v1_dns__zone_name__get"];
        put?: never;
        post?: never;
        /** Delete Zone */
        delete: operations["delete_zone_v1_dns__zone_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/{zone_name}/rrsets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Zone */
        put: operations["update_zone_v1_dns__zone_name__rrsets_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/{zone_name}/dnssec/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable Dnssec */
        post: operations["enable_dnssec_v1_dns__zone_name__dnssec_enable_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/{zone_name}/dnssec/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable Dnssec */
        post: operations["disable_dnssec_v1_dns__zone_name__dnssec_disable_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/email-forwards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Email Forwards */
        get: operations["list_email_forwards_v1_email_forwards_get"];
        put?: never;
        /** Create Email Forward */
        post: operations["create_email_forward_v1_email_forwards_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/email-forwards/{email_forward_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Email Forward */
        get: operations["get_email_forward_v1_email_forwards__email_forward_id__get"];
        put?: never;
        post?: never;
        /** Delete Email Forward */
        delete: operations["delete_email_forward_v1_email_forwards__email_forward_id__delete"];
        options?: never;
        head?: never;
        /** Update Email Forward */
        patch: operations["update_email_forward_v1_email_forwards__email_forward_id__patch"];
        trace?: never;
    };
    "/v1/email-forwards/bulk-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Bulk Update Email Forwards */
        patch: operations["bulk_update_email_forwards_v1_email_forwards_bulk_update_patch"];
        trace?: never;
    };
    "/v1/email-forwards/bulk-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Delete Email Forwards */
        post: operations["bulk_delete_email_forwards_v1_email_forwards_bulk_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Notifications */
        get: operations["list_notifications_v1_notifications_get"];
        put?: never;
        /** Create Notification */
        post: operations["create_notification_v1_notifications_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/{notification_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Notification */
        get: operations["get_notification_v1_notifications__notification_id__get"];
        /** Update Notification */
        put: operations["update_notification_v1_notifications__notification_id__put"];
        post?: never;
        /** Delete Notification */
        delete: operations["delete_notification_v1_notifications__notification_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/{notification_id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Notification Read */
        patch: operations["update_notification_read_v1_notifications__notification_id__read_patch"];
        trace?: never;
    };
    "/v1/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Organizations */
        get: operations["list_organizations_v1_organizations_get"];
        put?: never;
        /** Create Organization */
        post: operations["create_organization_v1_organizations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Users */
        get: operations["list_users_v1_organizations_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{organization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Organization */
        get: operations["get_organization_v1_organizations__organization_id__get"];
        put?: never;
        post?: never;
        /** Delete User */
        delete: operations["delete_user_v1_organizations__organization_id__delete"];
        options?: never;
        head?: never;
        /** Update Organization */
        patch: operations["update_organization_v1_organizations__organization_id__patch"];
        trace?: never;
    };
    "/v1/rdap/host/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Not Found */
        get: operations["not_found_v1_rdap_host__name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/rdap/contact/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Not Found */
        get: operations["not_found_v1_rdap_contact__name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/rdap/domain/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Not Found */
        get: operations["not_found_v1_rdap_domain__name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create User */
        post: operations["create_user_v1_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User */
        get: operations["get_current_user_v1_users_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User */
        get: operations["get_user_v1_users__user_id__get"];
        put?: never;
        post?: never;
        /** Delete User */
        delete: operations["delete_user_v1_users__user_id__delete"];
        options?: never;
        head?: never;
        /** Update User */
        patch: operations["update_user_v1_users__user_id__patch"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** APIKeyResponse */
        APIKeyResponse: {
            /**
             * Organization Id
             * @description The organization ID associated with the API Key.
             */
            organization_id: string;
            /**
             * Api Key Id
             * @description The unique identifier of the API key.
             */
            api_key_id: string;
            /**
             * Api Key
             * @description The plaintext API key for the organization.
             */
            api_key: string;
        };
        /** Body_issue_organization_token_v1_auth_token_post */
        Body_issue_organization_token_v1_auth_token_post: {
            /** @description The grant type for the authentication request. */
            grant_type?: components["schemas"]["GrantType"];
            /**
             * Client Id
             * @description The Client ID associated with the credentials.
             */
            client_id?: string | null;
            /**
             * Client Secret
             * @description Client secret for authentication.
             */
            client_secret?: string | null;
            /**
             * Username
             * @description Username for authentication.
             */
            username?: string | null;
            /**
             * Password
             * @description Password for the user.
             */
            password?: string | null;
        };
        /** BulkOperationResponse[EmailForwardBulkDeleteResult] */
        BulkOperationResponse_EmailForwardBulkDeleteResult_: {
            /** Results */
            results: components["schemas"]["BulkOperationResult"][];
        };
        /** BulkOperationResponse[EmailForwardBulkUpdateResult] */
        BulkOperationResponse_EmailForwardBulkUpdateResult_: {
            /** Results */
            results: components["schemas"]["BulkOperationResult"][];
        };
        /** BulkOperationResult */
        BulkOperationResult: {
            /** @description Status of performed operation */
            status: components["schemas"]["BulkOperationStatus"];
            /**
             * Error Message
             * @description Error message if operation failed
             */
            error_message?: string | null;
        };
        /**
         * BulkOperationStatus
         * @enum {string}
         */
        BulkOperationStatus: "success" | "failed";
        /**
         * Currency
         * @enum {string}
         */
        Currency: "USD" | "EUR";
        /**
         * DnsChangeAction
         * @enum {string}
         */
        DnsChangeAction: "create_zone" | "delete_zone" | "create_record" | "delete_record" | "enable_dnssec" | "disable_dnssec";
        /** DnsChangeResponse */
        DnsChangeResponse: {
            action: components["schemas"]["DnsChangeAction"];
            /** Rrset Name */
            rrset_name: string | null;
            rrset_type: components["schemas"]["DnsRrsetType"] | null;
            /** Record Data */
            record_data: string | null;
            /** Ttl */
            ttl: number | null;
        };
        /** DnsChangesResponse */
        DnsChangesResponse: {
            /** Zone Name */
            zone_name: string;
            /** Changeset Id */
            changeset_id: string | null;
            /** Num Changes */
            num_changes: number;
            /** Changes */
            changes: components["schemas"]["DnsChangeResponse"][];
        };
        /** DnsRecordCreate */
        DnsRecordCreate: {
            /** Rdata */
            rdata: string;
        };
        /** DnsRecordResponse */
        DnsRecordResponse: {
            /** Rdata */
            rdata: string;
        };
        /** DnsRrsetCreate */
        DnsRrsetCreate: {
            /** Name */
            name: string;
            type: components["schemas"]["DnsRrsetType"];
            /** Ttl */
            ttl: number;
            /**
             * Records
             * @default []
             */
            records: components["schemas"]["DnsRecordCreate"][];
        };
        /** DnsRrsetResponse */
        DnsRrsetResponse: {
            /** Name */
            name: string;
            type: components["schemas"]["DnsRrsetType"];
            /** Ttl */
            ttl: number;
            /**
             * Records
             * @default []
             */
            records: components["schemas"]["DnsRecordResponse"][];
        };
        /**
         * DnsRrsetType
         * @enum {string}
         */
        DnsRrsetType: "A" | "AAAA" | "ALIAS" | "CAA" | "CNAME" | "DNSKEY" | "DS" | "MX" | "NS" | "PTR" | "TXT" | "SOA" | "SRV";
        /** DnsZoneCreate */
        DnsZoneCreate: {
            /**
             * Rrsets
             * @default []
             */
            rrsets: components["schemas"]["DnsRrsetCreate"][];
            /** @default disabled */
            dnssec_status: components["schemas"]["DnssecStatus"];
            /** Name */
            name: string;
        };
        /** DnsZoneResponse */
        DnsZoneResponse: {
            /** @default disabled */
            dnssec_status: components["schemas"]["DnssecStatus"];
            /** Name */
            name: string;
            /** @default {} */
            domain_parts: components["schemas"]["DomainNameParts"];
            /**
             * Rrsets
             * @default []
             */
            rrsets: components["schemas"]["DnsRrsetResponse"][];
        };
        /** DnsZoneRrsetsCreate */
        DnsZoneRrsetsCreate: {
            /**
             * Rrsets
             * @default []
             */
            rrsets: components["schemas"]["DnsRrsetCreate"][];
        };
        /**
         * DnssecStatus
         * @enum {string}
         */
        DnssecStatus: "enabled" | "disabled";
        /** DomainAvailabilityData */
        DomainAvailabilityData: {
            /** Domain */
            domain: string;
            available: components["schemas"]["DomainAvailabilityStatus"];
            error?: components["schemas"]["ErrorResponse"] | null;
        };
        /**
         * DomainAvailabilityStatus
         * @enum {string}
         */
        DomainAvailabilityStatus: "available" | "unavailable" | "error";
        /** DomainNameParts */
        DomainNameParts: {
            /** Subdomain */
            subdomain?: string | null;
            /** Domain */
            domain?: string | null;
            /** Suffix */
            suffix?: string | null;
        };
        /** DomainsRequest */
        DomainsRequest: {
            /** Domains */
            domains: string[];
        };
        /** EmailForward */
        EmailForward: {
            /**
             * Updated On
             * Format: date-time
             * @description The date/time the entry was last updated on
             */
            updated_on?: string;
            /**
             * Created On
             * Format: date-time
             * @description The date/time the entry was created on
             */
            created_on?: string;
            /**
             * Source Address
             * Format: email
             * @description The source email address to forward from
             */
            source_address: string;
            /**
             * Target Address
             * Format: email
             * @description The target email address to forward to
             */
            target_address: string;
            /**
             * @description Current status of the email forward rule
             * @default active
             */
            status: components["schemas"]["EmailForwardStatus"];
            /** Email Forward Id */
            email_forward_id?: string;
        };
        /** EmailForwardBulkDelete */
        EmailForwardBulkDelete: {
            /**
             * Email Forward Ids
             * @description List of email forward ids to delete
             */
            email_forward_ids: string[];
        };
        /** EmailForwardBulkUpdate */
        EmailForwardBulkUpdate: {
            /**
             * Email Forwards
             * @description List of email forwards data to update
             */
            email_forwards: components["schemas"]["EmailForwardBulkUpdateItem"][];
        };
        /** EmailForwardBulkUpdateItem */
        EmailForwardBulkUpdateItem: {
            /**
             * Source Address
             * @description The source email address to forward from
             */
            source_address?: string | null;
            /**
             * Target Address
             * @description The target email address to forward to
             */
            target_address?: string | null;
            /** @description Current status of the email forward rule */
            status?: components["schemas"]["EmailForwardStatus"] | null;
            /**
             * Email Forward Id
             * @description Unique identifier for the email forward
             */
            email_forward_id: string;
        };
        /** EmailForwardCreate */
        EmailForwardCreate: {
            /**
             * Source Address
             * Format: email
             * @description The source email address to forward from
             */
            source_address: string;
            /**
             * Target Address
             * Format: email
             * @description The target email address to forward to
             */
            target_address: string;
            /**
             * @description Current status of the email forward rule
             * @default active
             */
            status: components["schemas"]["EmailForwardStatus"];
        };
        /**
         * EmailForwardStatus
         * @enum {string}
         */
        EmailForwardStatus: "active" | "inactive";
        /** EmailForwardUpdate */
        EmailForwardUpdate: {
            /**
             * Source Address
             * @description The source email address to forward from
             */
            source_address?: string | null;
            /**
             * Target Address
             * @description The target email address to forward to
             */
            target_address?: string | null;
            /** @description Current status of the email forward rule */
            status?: components["schemas"]["EmailForwardStatus"] | null;
        };
        /** ErrorResponse */
        ErrorResponse: {
            /** Error Type */
            error_type: string;
            /** Message */
            message?: string | null;
            /** Details */
            details?: string | null;
        };
        /**
         * GrantType
         * @enum {string}
         */
        GrantType: "client_credentials" | "password" | "refresh_token";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        JsonValue: unknown;
        /** Notification */
        Notification: {
            /**
             * Updated On
             * Format: date-time
             * @description The date/time the entry was last updated on
             */
            updated_on?: string;
            /**
             * Created On
             * Format: date-time
             * @description The date/time the entry was created on
             */
            created_on?: string;
            /**
             * Subject
             * @description The subject of the notification
             */
            subject: string;
            /**
             * Publish Date
             * Format: date-time
             * @description The date/time the notification is to be published
             */
            publish_date?: string;
            /**
             * Type
             * @description The type of notification
             */
            type: string;
            /**
             * Source
             * @description Source of the notification
             */
            source: string;
            /**
             * Message
             * @description The message content of the notification
             */
            message: string;
            /**
             * Author
             * @description The user or system that created the notification
             */
            author: string;
            /**
             * Target
             * @description Target audience (broadcast, account, user)
             */
            target: string;
            /** Notification Id */
            notification_id?: string;
        };
        /** NotificationCreate */
        NotificationCreate: {
            /**
             * Subject
             * @description The subject of the notification
             */
            subject: string;
            /**
             * Publish Date
             * Format: date-time
             * @description The date/time the notification is to be published
             */
            publish_date?: string;
            /**
             * Type
             * @description The type of notification
             */
            type: string;
            /**
             * Source
             * @description Source of the notification
             */
            source: string;
            /**
             * Message
             * @description The message content of the notification
             */
            message: string;
            /**
             * Author
             * @description The user or system that created the notification
             */
            author: string;
            /**
             * Target
             * @description Target audience (broadcast, account, user)
             */
            target: string;
        };
        /** NotificationReadUpdate */
        NotificationReadUpdate: {
            /** User Id */
            user_id: string;
        };
        /** NotificationSummary */
        NotificationSummary: {
            /**
             * Subject
             * @description The subject of the notification
             */
            subject: string;
            /**
             * Publish Date
             * Format: date-time
             * @description The date/time the notification is to be published
             */
            publish_date?: string;
            /**
             * Type
             * @description The type of notification
             */
            type: string;
            /**
             * Source
             * @description Source of the notification
             */
            source: string;
            /**
             * Message
             * @description The message content of the notification
             */
            message: string;
            /**
             * Author
             * @description The user or system that created the notification
             */
            author: string;
            /**
             * Target
             * @description Target audience (broadcast, account, user)
             */
            target: string;
            /** Notification Id */
            notification_id?: string;
        };
        /** NotificationUpdate */
        NotificationUpdate: {
            /**
             * Subject
             * @description The subject of the notification
             */
            subject: string;
            /**
             * Publish Date
             * Format: date-time
             * @description The date/time the notification is to be published
             */
            publish_date?: string;
            /**
             * Type
             * @description The type of notification
             */
            type: string;
            /**
             * Source
             * @description Source of the notification
             */
            source: string;
            /**
             * Message
             * @description The message content of the notification
             */
            message: string;
            /**
             * Author
             * @description The user or system that created the notification
             */
            author: string;
            /**
             * Target
             * @description Target audience (broadcast, account, user)
             */
            target: string;
        };
        /** Organization */
        Organization: {
            /**
             * Deleted On
             * @description The date/time the entry was deleted on
             */
            deleted_on?: string | null;
            /**
             * Created On
             * Format: date-time
             * @description The date/time the entry was created on
             */
            created_on?: string;
            /**
             * Organization Name
             * @description Name of the organization.
             */
            organization_name: string;
            /**
             * Address 1
             * @description First line of the organization's address.
             */
            address_1: string;
            /**
             * Address 2
             * @description Second line of the organization's address.
             */
            address_2?: string | null;
            /**
             * City
             * @description City of the organization's address.
             */
            city: string;
            /**
             * State Or Province
             * @description State or province of the organization's address.
             */
            state_or_province?: string | null;
            /**
             * Postal Code
             * @description Postal code of the organization's address.
             */
            postal_code?: string | null;
            /**
             * Country Code
             * @description ISO 3166-1 alpha-2 country code.
             */
            country_code: string;
            /**
             * Tax Id
             * @description Tax ID of the organization.
             */
            tax_id?: string | null;
            /**
             * Tax Id Type
             * @description Type of tax ID for the organization.
             */
            tax_id_type?: string | null;
            /**
             * Tax Rate
             * @description Tax rate for the organization.
             */
            tax_rate?: string | null;
            /** @description The currency used by the organization. */
            currency: components["schemas"]["Currency"];
            /**
             * Default Locale
             * @description Default locale for the organization.
             */
            default_locale: string;
            /**
             * @description Status of the organization.
             * @default active
             */
            status: components["schemas"]["OrganizationStatus"];
            /**
             * Organization Id
             * @description Unique identifier for the organization.
             */
            organization_id?: string;
            /**
             * Parent Organization Id
             * @description ID of the parent organization.
             */
            parent_organization_id?: string | null;
            /**
             * Users
             * @default []
             */
            users: components["schemas"]["User"][];
        };
        /** OrganizationCreate */
        OrganizationCreate: {
            /**
             * Organization Name
             * @description Name of the organization.
             */
            organization_name: string;
            /**
             * Address 1
             * @description First line of the organization's address.
             */
            address_1: string;
            /**
             * Address 2
             * @description Second line of the organization's address.
             */
            address_2?: string | null;
            /**
             * City
             * @description City of the organization's address.
             */
            city: string;
            /**
             * State Or Province
             * @description State or province of the organization's address.
             */
            state_or_province?: string | null;
            /**
             * Postal Code
             * @description Postal code of the organization's address.
             */
            postal_code?: string | null;
            /**
             * Country Code
             * @description ISO 3166-1 alpha-2 country code.
             */
            country_code: string;
            /**
             * Tax Id
             * @description Tax ID of the organization.
             */
            tax_id?: string | null;
            /**
             * Tax Id Type
             * @description Type of tax ID for the organization.
             */
            tax_id_type?: string | null;
            /**
             * Tax Rate
             * @description Tax rate for the organization.
             */
            tax_rate?: number | string | null;
            /** @description The currency used by the organization. */
            currency: components["schemas"]["Currency"];
            /**
             * Default Locale
             * @description Default locale for the organization.
             */
            default_locale: string;
            /**
             * @description Status of the organization.
             * @default active
             */
            status: components["schemas"]["OrganizationStatus"];
            /**
             * Parent Organization Id
             * @description ID of the parent organization.
             */
            parent_organization_id?: string | null;
            /**
             * Users
             * @description List of users that needs to be created with the organization.
             * @default []
             */
            users: components["schemas"]["UserCreate"][];
        };
        /**
         * OrganizationStatus
         * @enum {string}
         */
        OrganizationStatus: "active" | "inactive" | "pending_verification" | "suspended" | "archived";
        /** OrganizationTokenResponse */
        OrganizationTokenResponse: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default Bearer
             */
            token_type: string;
            /** Expires In */
            expires_in: number;
        };
        /** OrganizationUpdate */
        OrganizationUpdate: {
            /**
             * Organization Name
             * @description Name of the organization.
             */
            organization_name?: string | null;
            /**
             * Address 1
             * @description First line of the organization's address.
             */
            address_1?: string | null;
            /**
             * Address 2
             * @description Second line of the organization's address.
             */
            address_2?: string | null;
            /**
             * City
             * @description City of the organization's address.
             */
            city?: string | null;
            /**
             * State Or Province
             * @description State or province of the organization's address.
             */
            state_or_province?: string | null;
            /**
             * Postal Code
             * @description Postal code of the organization's address.
             */
            postal_code?: string | null;
            /** Country Code */
            country_code?: string | null;
            /**
             * Tax Id
             * @description Tax ID of the organization.
             */
            tax_id?: string | null;
            /**
             * Tax Id Type
             * @description Type of tax ID for the organization.
             */
            tax_id_type?: string | null;
            /**
             * Tax Rate
             * @description Tax rate for the organization.
             */
            tax_rate?: number | string | null;
            /** @description The currency used by the organization. */
            currency?: components["schemas"]["Currency"] | null;
            /**
             * Default Locale
             * @description Default locale for the organization.
             */
            default_locale?: string | null;
            /** @description Status of the organization. */
            status?: components["schemas"]["OrganizationStatus"] | null;
            /**
             * Parent Organization Id
             * @description ID of the parent organization.
             */
            parent_organization_id?: string | null;
        };
        /** PaginationMetadata */
        PaginationMetadata: {
            /** Total Pages */
            total_pages: number;
            /** Total Items */
            total_items: number;
            /** Current Page */
            current_page: number;
            /** Page Size */
            page_size: number;
            /** Has Next Page */
            has_next_page: boolean;
            /** Has Previous Page */
            has_previous_page: boolean;
        };
        /** Pagination[DnsZoneResponse] */
        Pagination_DnsZoneResponse_: {
            /** Results */
            results: components["schemas"]["DnsZoneResponse"][];
            pagination: components["schemas"]["PaginationMetadata"];
        };
        /** Pagination[EmailForward] */
        Pagination_EmailForward_: {
            /** Results */
            results: components["schemas"]["EmailForward"][];
            pagination: components["schemas"]["PaginationMetadata"];
        };
        /** Pagination[Organization] */
        Pagination_Organization_: {
            /** Results */
            results: components["schemas"]["Organization"][];
            pagination: components["schemas"]["PaginationMetadata"];
        };
        /** Pagination[UserNotificationSummary] */
        Pagination_UserNotificationSummary_: {
            /** Results */
            results: components["schemas"]["UserNotificationSummary"][];
            pagination: components["schemas"]["PaginationMetadata"];
        };
        /** Pagination[UserSchema] */
        Pagination_UserSchema_: {
            /** Results */
            results: components["schemas"]["UserSchema"][];
            pagination: components["schemas"]["PaginationMetadata"];
        };
        /** SignupCreate */
        SignupCreate: {
            /** @description User signup to platform. */
            user: components["schemas"]["UserCreate"];
            /** @description Organization signup. */
            organization: components["schemas"]["OrganizationCreate"];
        };
        /** User */
        User: {
            /**
             * Updated On
             * Format: date-time
             * @description The date/time the entry was last updated on
             */
            updated_on?: string;
            /**
             * Created On
             * Format: date-time
             * @description The date/time the entry was created on
             */
            created_on?: string;
            /**
             * Username
             * @description The user's unique username
             */
            username: string;
            /**
             * First Name
             * @description The user's first name
             */
            first_name: string;
            /**
             * Last Name
             * @description The user's last name
             */
            last_name: string;
            /**
             * Email
             * Format: email
             * @description The user's email address
             */
            email: string;
            /**
             * Phone
             * @description The user's phone number
             */
            phone?: string | null;
            /**
             * @description The user's status
             * @default active
             */
            status: components["schemas"]["UserStatus"];
            /**
             * Locale
             * @description The locale
             */
            locale: string;
            /**
             * Organization Id
             * @description The user's organization id
             * @default None
             */
            organization_id: string;
            /** User Id */
            user_id?: string;
        };
        /** UserCreate */
        UserCreate: {
            /**
             * Username
             * @description The user's unique username
             */
            username: string;
            /**
             * First Name
             * @description The user's first name
             */
            first_name: string;
            /**
             * Last Name
             * @description The user's last name
             */
            last_name: string;
            /**
             * Email
             * Format: email
             * @description The user's email address
             */
            email: string;
            /**
             * Phone
             * @description The user's phone number
             */
            phone?: string | null;
            /**
             * @description The user's status
             * @default active
             */
            status: components["schemas"]["UserStatus"];
            /**
             * Locale
             * @description The locale
             */
            locale: string;
            /**
             * Password
             * @description Plaintext password for hashing during creation
             */
            password: string;
        };
        /** UserNotification */
        UserNotification: {
            /**
             * Updated On
             * Format: date-time
             * @description The date/time the entry was last updated on
             */
            updated_on?: string;
            /**
             * Created On
             * Format: date-time
             * @description The date/time the entry was created on
             */
            created_on?: string;
            /** User Notification Id */
            user_notification_id?: string;
            /**
             * @description Whether the user has read the notification
             * @default unread
             */
            status: components["schemas"]["UserNotificationStatus"];
            /**
             * User Id
             * @default None
             */
            user_id: string;
            /**
             * Notification Id
             * @description Unique identifier for the notification
             * @default None
             */
            notification_id: string;
            notification: components["schemas"]["Notification"];
        };
        /**
         * UserNotificationStatus
         * @enum {string}
         */
        UserNotificationStatus: "read" | "unread";
        /** UserNotificationSummary */
        UserNotificationSummary: {
            /** User Notification Id */
            user_notification_id?: string;
            /**
             * @description Whether the user has read the notification
             * @default unread
             */
            status: components["schemas"]["UserNotificationStatus"];
            notification: components["schemas"]["NotificationSummary"];
        };
        /** UserSchema */
        UserSchema: {
            /**
             * Updated On
             * Format: date-time
             * @description The date/time the entry was last updated on
             */
            updated_on?: string;
            /**
             * Created On
             * Format: date-time
             * @description The date/time the entry was created on
             */
            created_on?: string;
            /**
             * Username
             * @description The user's unique username
             */
            username: string;
            /**
             * First Name
             * @description The user's first name
             */
            first_name: string;
            /**
             * Last Name
             * @description The user's last name
             */
            last_name: string;
            /**
             * Email
             * Format: email
             * @description The user's email address
             */
            email: string;
            /**
             * Phone
             * @description The user's phone number
             */
            phone?: string | null;
            /**
             * @description The user's status
             * @default active
             */
            status: components["schemas"]["UserStatus"];
            /**
             * Locale
             * @description The locale
             */
            locale: string;
            /**
             * Organization Id
             * @description The user's organization id
             * @default None
             */
            organization_id: string;
            /** User Id */
            user_id?: string;
            /**
             * Password Hash
             * @description Password hash
             */
            password_hash: string;
        };
        /**
         * UserStatus
         * @enum {string}
         */
        UserStatus: "active" | "inactive" | "pending_verification" | "suspended" | "archived";
        /** UserTokenResponse */
        UserTokenResponse: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default Bearer
             */
            token_type: string;
            /** Expires In */
            expires_in: number;
            /** Refresh Token */
            refresh_token: string;
        };
        /** UserUpdate */
        UserUpdate: {
            /**
             * Username
             * @description The user's unique username
             */
            username?: string | null;
            /**
             * First Name
             * @description The user's first name
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description The user's last name
             */
            last_name?: string | null;
            /**
             * Email
             * @description The user's email address
             */
            email?: string | null;
            /**
             * Phone
             * @description The user's phone number
             */
            phone?: string | null;
            /** @description The user's status */
            status?: components["schemas"]["UserStatus"] | null;
            /**
             * Locale
             * @description The user's locale
             */
            locale?: string | null;
        };
        /** UserWithAttributes */
        UserWithAttributes: {
            /**
             * Updated On
             * Format: date-time
             * @description The date/time the entry was last updated on
             */
            updated_on?: string;
            /**
             * Created On
             * Format: date-time
             * @description The date/time the entry was created on
             */
            created_on?: string;
            /**
             * Username
             * @description The user's unique username
             */
            username: string;
            /**
             * First Name
             * @description The user's first name
             */
            first_name: string;
            /**
             * Last Name
             * @description The user's last name
             */
            last_name: string;
            /**
             * Email
             * Format: email
             * @description The user's email address
             */
            email: string;
            /**
             * Phone
             * @description The user's phone number
             */
            phone?: string | null;
            /**
             * @description The user's status
             * @default active
             */
            status: components["schemas"]["UserStatus"];
            /**
             * Locale
             * @description The locale
             */
            locale: string;
            /**
             * Organization Id
             * @description The user's organization id
             * @default None
             */
            organization_id: string;
            /** User Id */
            user_id?: string;
            /**
             * User Attributes
             * @default {}
             */
            user_attributes: {
                [key: string]: components["schemas"]["JsonValue"];
            };
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    issue_organization_token_v1_auth_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_issue_organization_token_v1_auth_token_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationTokenResponse"] | components["schemas"]["UserTokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_v1_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    issue_api_key_v1_auth_client_credentials_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeyResponse"];
                };
            };
        };
    };
    delete_api_key_v1_auth_client_credentials__api_key_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    signup_v1_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationTokenResponse"] | components["schemas"]["UserTokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_dns_check_domain_availability_v1_availability_dns_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainAvailabilityData"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_rdap_check_domain_availability_v1_availability_rdap_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainAvailabilityData"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_zones_v1_dns_get: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pagination_DnsZoneResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_zone_v1_dns_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DnsZoneCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsChangesResponse"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_zone_v1_dns__zone_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                zone_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsZoneResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_zone_v1_dns__zone_name__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                zone_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_zone_v1_dns__zone_name__rrsets_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                zone_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DnsZoneRrsetsCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enable_dnssec_v1_dns__zone_name__dnssec_enable_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                zone_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsChangesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    disable_dnssec_v1_dns__zone_name__dnssec_disable_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                zone_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsChangesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_email_forwards_v1_email_forwards_get: {
        parameters: {
            query?: {
                /** @description Optional status to filter the results */
                status?: components["schemas"]["EmailForwardStatus"] | null;
                /** @description Optional source address to filter the results */
                source_address?: string | null;
                /** @description Optional target address to filter the results */
                target_address?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pagination_EmailForward_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_email_forward_v1_email_forwards_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailForwardCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailForward"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_email_forward_v1_email_forwards__email_forward_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email_forward_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailForward"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_email_forward_v1_email_forwards__email_forward_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email_forward_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_email_forward_v1_email_forwards__email_forward_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email_forward_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailForwardUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailForward"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_update_email_forwards_v1_email_forwards_bulk_update_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailForwardBulkUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkOperationResponse_EmailForwardBulkUpdateResult_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_delete_email_forwards_v1_email_forwards_bulk_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailForwardBulkDelete"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkOperationResponse_EmailForwardBulkDeleteResult_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_notifications_v1_notifications_get: {
        parameters: {
            query: {
                user_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pagination_UserNotificationSummary_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_notification_v1_notifications_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_notification_v1_notifications__notification_id__get: {
        parameters: {
            query: {
                user_id: string;
            };
            header?: never;
            path: {
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserNotification"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_notification_v1_notifications__notification_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_notification_v1_notifications__notification_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_notification_read_v1_notifications__notification_id__read_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationReadUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_organizations_v1_organizations_get: {
        parameters: {
            query?: {
                /** @description Optional status to filter the results */
                status?: components["schemas"]["OrganizationStatus"] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pagination_Organization_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_organization_v1_organizations_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_v1_organizations_users_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pagination_UserSchema_"];
                };
            };
        };
    };
    get_organization_v1_organizations__organization_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_v1_organizations__organization_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_organization_v1_organizations__organization_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    not_found_v1_rdap_host__name__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    not_found_v1_rdap_contact__name__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    not_found_v1_rdap_domain__name__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_user_v1_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_v1_users_me_get: {
        parameters: {
            query?: {
                attributes?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithAttributes"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_v1_users__user_id__get: {
        parameters: {
            query?: {
                attributes?: string[] | null;
            };
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithAttributes"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_v1_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_v1_users__user_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
